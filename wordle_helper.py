# -*- coding: utf-8 -*-
"""Wordle_Program.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14ETcJDJKpCULL9E5fGkUeBXkjpCbBWVK
"""

# allows me to access the 5 letter word txt file
from google.colab import drive
drive.mount('/content/drive')

# file location of the txt file containing 5 letter words
text_words = '/content/drive/My Drive/Python Projects/five_letter_words.txt'

with open(text_words,'r') as f:

  # This drops the \n at the end of each line:
  words = f.read().splitlines()

# takes one letter as a parameter, as well as the exact position of that letter or the position that the letter isn't in
# also takes a list of different 5 letter words as a parameter
# outputs a list of words that either have the specified letter in the exact position or 
# a list of words that don't have the specified letter in the position_not parameter
def wordle_letter(letter, exact_position, position_not, word_list):
  #create a blank list which will be the output of this function later
  final_list = []
  # iterates through each word in the 5 letter word list
  for word in word_list:
    # if the exact_position is known, then we will check to make sure the letter parameter is equal to the letter
    # in the exact position index of the word in the five letter word list
    if exact_position is not None:
      if letter == word[exact_position]:
        # if the letter is in the exact position that is specified, then we will append this word to the final list
        final_list.append(word)
    # if the exact position is not known, then we go to this else statement
    else:
      # if the letter we specify as a parameter is in the word
      if letter in word:
        # checks to make sure that the word's letter at index position_not is not equal to the letter parameter
        # if this condition is passed, we will append the word to the final list
        if (position_not is not None) and (word[position_not] != letter):
          final_list.append(word)
        # if the position_not is empty, then we will append the word to the final_list
        elif (position_not is None):
          final_list.append(word)
  # returns a list of five letter words that meet the following conditions I provided above
  return final_list

# helper function to help filter out words that contain a letter that is definitely not in the word
def not_letter_helper(not_letter, word_list):
  # if the  letter is
  return [word for word in word_list if not_letter not in word]

# another helper function that takes a string of not_letters and a list of words 
# this loops through each letter in the string not_letters and outputs a list of words
# that do not contain any of the not_letters
def wordle_not_letter(not_letters, word_list):
  # loops through the letters in not letter
  for letter in not_letters:
    word_list = not_letter_helper(letter, word_list)
  return word_list

# takes a dictionary parameter dict_exact where (key = exact position of the letter) and (value = letter)
# takes a dictionary dict_not_exact where (key = the position where the letter definitely is not at) and (value = letter)
# takes a string not_letters of letters that are definitely not in the word
# takes a list word_list of five letter words
# this will return a list of five letter words that meet the specified conditions
# the list that this function outputs will then be passed back into the function as the word_list parameter on each new guess
def wordle(dict_exact, dict_not_exact, not_letters, word_list):

  if dict_exact is not None and dict_not_exact is not None:

    for key in dict_exact:
      word_list = wordle_letter(dict_exact[key], key, None, word_list)
      
    for key in dict_not_exact:
      word_list = wordle_letter(dict_not_exact[key], None, key, word_list)
    
    if not_letters is not None:
      word_list = wordle_not_letter(not_letters, word_list)

  elif dict_exact is not None and dict_not_exact is None:

    for key in dict_exact:
      word_list = wordle_letter(dict_exact[key], key, None, word_list)

    if not_letters is not None:
      word_list = wordle_not_letter(not_letters, word_list)

  elif dict_exact is None and dict_not_exact is not None:

    for key in dict_not_exact:
      word_list = wordle_letter(dict_not_exact[key], None, key, word_list)
    
    if not_letters is not None:
      word_list = wordle_not_letter(not_letters, word_list)

  elif dict_exact is None and dict_not_exact is None:
    
    if not_letters is not None:
      word_list = wordle_not_letter(not_letters, word_list)
  
  return word_list

# WORDLE Archive #80 - Answer: shrub
# this code here and the comments show how these functions I wrote give me a better chance at solving Wordle
# each condition that I put in helps narrow down what the word could be
# It is best to start out with a word like alone that has 3 different vowels, in order to increase your chances at solving the Wordle

# 1st starting guess is: alone

# parameters for the wordle function
dict_exact = {1: 'h', 4: 'b'}
dict_not_exact = {2: 'u'}
not_letters = 'tm'

#dict_exact = None
#dict_not_exact = None
#not_letters = 'alone'
# 2nd guess: which
#guess = wordle(dict_exact, dict_not_exact, not_letters, words)

#dict_exact = {1: 'h'}
#dict_not_exact = None
#not_letters = 'wic'
# 3rd guess: thumb
#guess = wordle(dict_exact, dict_not_exact, not_letters, guess)

#dict_exact = {1: 'h', 4: 'b'}
#dict_not_exact = {2: 'u'}
#not_letters = 'tm'
# 4th guess: shrub
#guess = wordle(dict_exact, dict_not_exact, not_letters, guess)


# 5th guess
#guess = wordle(dict_exact, dict_not_exact, not_letters, guess)

# outputs the guess list and you choose a word from this list to make as your next guess
# in this Wordle, the guess list after the 3rd guess was contained only the word shrub, which ended up being the correct answer
#guess